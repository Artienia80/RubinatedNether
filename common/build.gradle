
architectury {
	common rootProject.enabled_platforms.split(',')
}

loom {
	accessWidenerPath = file("src/main/resources/rubinatednether.accesswidener")
}

processResources.duplicatesStrategy = DuplicatesStrategy.INCLUDE

sourceSets {
	main {
		// Platform specific generated files
		resources {
			srcDirs += [
					'src/generated'
			]
			exclude ".cache/**"
			exclude "**/.fabric"
			exclude "**/.forge"

		}
	}
}

dependencies {
	// We depend on Fabric Loader here to use the Fabric @Environment annotations,
	// which get remapped to the correct annotations on each platform.
	// Do NOT use other classes from Fabric Loader.
	modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"
	modCompileOnly fabricApi.module("fabric-transitive-access-wideners-v1", rootProject.fabric_api_version)
	modCompileOnly fabricApi.module("fabric-item-group-api-v1", rootProject.fabric_api_version)


	// EMI
	modCompileOnly("dev.emi:emi-xplat-intermediary:${rootProject.emi_version}+${rootProject.minecraft_version}:api")

	// MixinExtras
	compileOnly annotationProcessor("io.github.llamalad7:mixinextras-common:${rootProject.mixin_extras_version}")

	// Iris Shaders (only needed for shader test, api is identical to oculus)
	modCompileOnly("maven.modrinth:iris:1.7.2+1.20.1")

	// Spelunkery
	modImplementation("maven.modrinth:moonlight:fabric_1.20-2.12.21")
	modCompileOnly("maven.modrinth:moonlight:fabric_1.20-2.12.21")
	modLocalRuntime("maven.modrinth:moonlight:fabric_1.20-2.12.21")
	modRuntimeOnly("maven.modrinth:moonlight:fabric_1.20-2.12.21")
	modApi("maven.modrinth:moonlight:fabric_1.20-2.12.21")
	modCompileOnly("maven.modrinth:spelunkery:1.20.1-0.3.13-fabric")
	//modImplementation("maven.modrinth:spelunkery:1.20.1-0.3.13-fabric")
}
repositories {
	mavenCentral()
}
