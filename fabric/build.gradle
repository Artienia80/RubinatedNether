plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

fabricApi {
    configureDataGeneration {
        createRunConfiguration = false
    }
}

sourceSets {
    main {
        // Platform specific generated files
        resources {
            srcDirs += [
                    'src/main/generated'
            ]
            exclude ".cache/**"
            exclude "**/.fabric"
            exclude "**/.forge"

        }
    }
}

loom {
    Project common = project(":common")
    Project forge = project(":forge")
    accessWidenerPath = common.file("src/main/resources/rubinatednether.accesswidener")

    runs {
        datagen {
            client()
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${common.file("src/generated")}"
            vmArg "-Drubinated_nether.datagen.fabric-output-dir=${file("src/generated")}"
            vmArg "-Drubinated_nether.datagen.forge-output-dir=${forge.file("src/generated")}"
            vmArg "-Dfabric-api.datagen.modid=rubinated_nether"

            runDir "build/datagen"
        }
    }
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"

    // Mod Menu
    modCompileOnly("com.terraformersmc:modmenu:${rootProject.modmenu_version}")
    modLocalRuntime("com.terraformersmc:modmenu:${rootProject.modmenu_version}")

    // Trinkets
    modImplementation("dev.emi:trinkets:${rootProject.trinkets_version}")

    // EMI
    modLocalRuntime("dev.emi:emi-fabric:${rootProject.emi_version}+${rootProject.minecraft_version}")

    // Spelunkery
    modImplementation ("maven.modrinth:moonlight:fabric_1.20-2.12.21")
    modCompileOnly ("maven.modrinth:moonlight:fabric_1.20-2.12.21")
    modLocalRuntime ("maven.modrinth:moonlight:fabric_1.20-2.12.21")
    modApi("maven.modrinth:moonlight:fabric_1.20-2.12.21")
    modRuntimeOnly("maven.modrinth:moonlight:fabric_1.20-2.12.21")

    modCompileOnly "maven.modrinth:spelunkery:1.20.1-0.3.13-fabric"
    //modLocalRuntime("maven.modrinth:spelunkery:1.20.1-0.3.13-fabric")

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
    injectAccessWidener = true
    dependsOn shadowJar
}
