plugins {
    id 'com.github.johnrengelman.shadow'
}

loom {
    Project common = project(":common")
    accessWidenerPath = common.file("src/main/resources/rubinatednether.accesswidener")

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
        mixinConfig "rubinated_nether.mixins.json"
    }

    runs {
        data {
            data()
            programArgs "--all", "--mod", "rubinated_nether"
            programArgs "--existing", common.file("src/main/resources").getAbsolutePath()
            programArgs "--output", common.file("src/generated").getAbsolutePath()
        }
    }

}

sourceSets {
    main {
        // Platform specific generated files
        resources {
            srcDirs += [
                    'src/main/generated'
            ]
            exclude ".cache/**"
            exclude "**/.fabric"
            exclude "**/.forge"

        }
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    forge "net.minecraftforge:forge:$rootProject.forge_version"

    // MixinExtras only has to be included on forge, fabric has it bundled
    compileOnly annotationProcessor("io.github.llamalad7:mixinextras-common:${rootProject.mixin_extras_version}")
    implementation include("io.github.llamalad7:mixinextras-forge:${rootProject.mixin_extras_version}")

    // Curios
    modImplementation("top.theillusivec4.curios:curios-forge:${rootProject.curios_version}+${rootProject.minecraft_version}")

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionForge')
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
}
